# Copyright 2018-2019 New Vector Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

swagger: '2.0'
info:
  title: "Matrix Federation Invite User To Room API"
  version: "1.0.0"
host: localhost:8448
schemes:
  - https
basePath: /_matrix/federation/v1
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  $ref: definitions/security.yaml
paths:
  "/invite/{roomId}/{eventId}":
    put:
      summary: Invites a remote user to a room
      description: |-
        Invites a remote user to a room. Once the event has been  signed by both the inviting
        homeserver and the invited homeserver, it can be sent to all of the servers in the
        room by the inviting homeserver.

        Servers should prefer to use the v2 API for invites instead of the v1 API. Servers
        which receive a v1 invite request must assume that the room version is either `"1"`
        or `"2"`.

        Note that events have a different format depending on the room version - check the
        [room version specification](/rooms) for precise event formats. **The request and response
        bodies here describe the common event fields in more detail and may be missing other
        required fields for a PDU.**
      operationId: sendInviteV1
      security:
        - signedRequest: []
      parameters:
        - in: path
          name: roomId
          type: string
          description: The room ID that the user is being invited to.
          required: true
          x-example: "!abc123:matrix.org"
        - in: path
          name: eventId
          type: string
          description: The event ID for the invite event, generated by the inviting server.
          required: true
          x-example: "$abc123:example.org"
        - in: body
          name: body
          type: object
          required: true
          schema:
            allOf:
              - $ref: "definitions/invite_event.yaml"
              - type: object
                properties:
                  unsigned:
                    type: object
                    title: UnsignedData
                    description: |-
                      Information included alongside the event that is not signed. May include more
                      than what is listed here.
                    properties:
                      invite_room_state:
                        type: array
                        description: |-
                          An optional list of simplified events to help the receiver of the invite
                          identify the room. The recommended events to include are the join rules,
                          canonical alias, avatar, and name of the room.
                        items:
                          $ref: "../../event-schemas/schema/stripped_state.yaml"
                        example:
                          $ref: "../../event-schemas/examples/invite_room_state.json"
          example: {
            "$ref": "examples/minimal_pdu.json",
            "type": "m.room.member",
            "state_key": "@joe:elsewhere.com",
            "origin": "example.org",
            "origin_server_ts": 1549041175876,
            "sender": "@someone:example.org",
            "content": {
                "membership": "invite"
            },
            "signatures": {
              "example.com": {
                "ed25519:key_version": "SomeSignatureHere"
              },
            }
          }
      responses:
        200:
          description: |-
            The event with the invited server's signature added. All other fields of the events
            should remain untouched. Note that events have a different format depending on the
            room version - check the [room version specification](/rooms) for precise event formats.
          schema:
            type: array
            minItems: 2
            maxItems: 2
            items:
              - type: integer
                description: The value `200`.
                example: 200
              - type: object
                description: An object containing the signed invite event.
                title: Event Container
                properties:
                  event:
                    $ref: "definitions/invite_event.yaml"
                required: ['event']
          examples:
            application/json: [
              200,
              {
                "event":  {
                  "$ref": "examples/minimal_pdu.json",
                  "type": "m.room.member",
                  "state_key": "@someone:example.org",
                  "origin": "example.org",
                  "origin_server_ts": 1549041175876,
                  "sender": "@someone:example.org",
                  "unsigned": {
                    "invite_room_state": {
                      "$ref": "../../event-schemas/examples/invite_room_state.json"
                    }
                  },
                  "content": {
                      "membership": "invite"
                  },
                  "signatures": {
                    "example.com": {
                      "ed25519:key_version": "SomeSignatureHere"
                    },
                    "elsewhere.com": {
                      "ed25519:k3y_versi0n": "SomeOtherSignatureHere"
                    }
                  }
                }
              }
            ]
        403:
          description: |-
            The invite is not allowed. This could be for a number of reasons, including:

            * The sender is not allowed to send invites to the target user/homeserver.
            * The homeserver does not permit anyone to invite its users.
            * The homeserver refuses to participate in the room.
          schema:
            $ref: "../client-server/definitions/errors/error.yaml"
          examples:
            application/json: {
              "errcode": "M_FORBIDDEN",
              "error": "User cannot invite the target user."
            }
